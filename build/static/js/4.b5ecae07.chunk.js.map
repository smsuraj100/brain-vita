{"version":3,"sources":["home/ActionCreators.js","home/Actions.js","home/styles.js","home/index.js"],"names":["updateBoardStatusAction","data","dispatch","payload","type","types","updateFirstCordAction","updateSecondCordAction","isFirstCordSelectedAction","resetBoardAction","Flex","styled","div","Square","Home","useDispatch","useSelector","state","homepage","boardStatus","firstCord","isFirstCordSelected","toggleFirstCordSelected","isValidMove","x","y","console","log","Math","abs","handleOnSquareClick","isHorizontalMove","temp","map","row","i","updateBoardStatus","cell","j","onClick","React","memo"],"mappings":"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","file":"static/js/4.b5ecae07.chunk.js","sourcesContent":["import {\n  updateBoardStatus,\n  updateFirstCord,\n  updateSecondCord,\n  isFirstCordSelected,\n  resetBoard,\n} from \"./Actions\";\n\nexport function updateBoardStatusAction(data) {\n  return (dispatch) => {\n    dispatch(updateBoardStatus(data));\n  };\n}\n\nexport function updateFirstCordAction(data) {\n  return (dispatch) => {\n    dispatch(updateFirstCord(data));\n  };\n}\n\nexport function updateSecondCordAction(data) {\n  return (dispatch) => {\n    dispatch(updateSecondCord(data));\n  };\n}\n\nexport function isFirstCordSelectedAction(data) {\n  return (dispatch) => {\n    dispatch(isFirstCordSelected(data));\n  };\n}\n\nexport function resetBoardAction() {\n  return (dispatch) => {\n    dispatch(resetBoard());\n  };\n}\n","import * as types from \"./ActionTypes\";\n\n/**\n * @description action for updating board status\n */\nexport const updateBoardStatus = (payload) => ({\n  type: types.UPDATE_BOARD_STATUS,\n  payload,\n});\n\n/**\n * @description action for updating co-ordinates for first tile\n */\nexport const updateFirstCord = (payload) => ({\n  type: types.UPDATE_FIRST_CORD,\n  payload,\n});\n\n/**\n * @description action for updating co-ordinates for second tile\n */\nexport const updateSecondCord = (payload) => ({\n  type: types.UPDATE_SECOND_CORD,\n  payload,\n});\n\n/**\n * @description action for toggling firstCordSelected flag\n */\nexport const isFirstCordSelected = (payload) => ({\n  type: types.IS_FIRST_CORD_SELECTED,\n  payload,\n});\n\n/**\n * @description action for resetting the board\n */\nexport const resetBoard = () => ({\n  type: types.RESET_BOARD,\n});\n","import styled from \"styled-components\";\n\nexport const Flex = styled.div`\n  display: flex;\n`;\n\nexport const Square = styled(Flex)`\n  width: 45px;\n  height: 45px;\n  justify-content: center;\n  align-items: center;\n  background-color: ${({ type }) =>\n    type === \"dead\" ? \"#CCCCCC\" : type === \"alive\" ? \"#6FA8DC\" : \"#F3F3F3\"};\n\n  &:hover {\n    background-color: pink;\n  }\n`;\n","import React, { Fragment } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  updateBoardStatusAction,\n  updateFirstCordAction,\n  updateSecondCordAction,\n  isFirstCordSelectedAction,\n  resetBoardAction,\n} from \"./ActionCreators\";\n\n// Style imports\nimport { Flex, Square } from \"./styles\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n\n  const { boardStatus, firstCord, isFirstCordSelected } = useSelector(\n    (state) => state.homepage\n  );\n\n  const toggleFirstCordSelected = () =>\n    dispatch(isFirstCordSelectedAction(!isFirstCordSelected));\n\n  const isValidMove = (x, y) => {\n    if (firstCord.x !== x && firstCord.y !== y) {\n      console.log(\"No Diagonal moves are allowed\");\n      return false;\n    } else if (firstCord.x === x) {\n      if (\n        Math.abs(firstCord.y - y) === 2 &&\n        boardStatus[firstCord.x][\n          firstCord.y > y ? firstCord.y - 1 : firstCord.y + 1\n        ] === \"alive\"\n      ) {\n        console.log(\"Valid Move\");\n        return true;\n      } else {\n        console.log(\"Invalid Move!!!\");\n        return false;\n      }\n    } else if (firstCord.y === y) {\n      if (\n        Math.abs(firstCord.x - x) === 2 &&\n        boardStatus[firstCord.x > x ? firstCord.x - 1 : firstCord.x + 1][\n          firstCord.y\n        ] === \"alive\"\n      ) {\n        console.log(\"Valid Move\");\n        return true;\n      } else {\n        console.log(\"Invalid Move!!!\");\n        return false;\n      }\n    }\n  };\n\n  const updateBoardStatus = (x, y, isHorizontalMove) => {\n    const temp = [...boardStatus];\n    if (isHorizontalMove) {\n      temp.map((row, i) => {\n        if (i === firstCord.x) {\n          row[firstCord.y] = \"hole\";\n          row[firstCord.y > y ? firstCord.y - 1 : firstCord.y + 1] = \"hole\";\n          row[y] = \"alive\";\n          return row;\n        } else return row;\n      });\n    } else {\n      temp.map((row, i) => {\n        if (i === firstCord.x) {\n          row[firstCord.y] = \"hole\";\n          return row;\n        }\n        if (i === (firstCord.x > x ? firstCord.x - 1 : firstCord.x + 1)) {\n          row[firstCord.y] = \"hole\";\n          return row;\n        }\n        if (i === x) {\n          row[y] = \"alive\";\n          return row;\n        }\n        return row;\n      });\n    }\n    dispatch(updateBoardStatusAction([...temp]));\n  };\n\n  const handleOnSquareClick = (x, y, type) => {\n    if (type === \"dead\") {\n      console.log(\"Please select approprite tile!\");\n      return;\n    } else if (!isFirstCordSelected) {\n      if (type !== \"hole\") {\n        toggleFirstCordSelected();\n        // setFirstCord({ x: x, y: y });\n        dispatch(updateFirstCordAction({ x: x, y: y }));\n      } else {\n        console.log(\"Please select approprite first tile!\");\n      }\n    } else if (isFirstCordSelected) {\n      if (type === \"hole\") {\n        toggleFirstCordSelected();\n        dispatch(updateSecondCordAction({ x: x, y: y }));\n        isValidMove(x, y);\n        if (isValidMove(x, y)) {\n          updateBoardStatus(x, y, firstCord.x === x);\n        }\n      } else {\n        console.log(\"Please select blank tile!\");\n      }\n    }\n  };\n\n  const handleOnResetClick = () => dispatch(resetBoardAction());\n\n  //   console.log(\"isHorizontalMove: \", isHorizontalMove);\n  //   console.log(\"isVerticalMove:\", isVerticalMove);\n  //   console.log(\"firstCord: \", firstCord);\n  //   console.log(\"secondCord: \", secondCord);\n  //   console.log(\"isFirstCordSelected: \", isFirstCordSelected);\n\n  return (\n    <div>\n      {boardStatus.map((row, i) => {\n        return (\n          <Flex key={i}>\n            {row.map((cell, j) => {\n              return (\n                <Fragment key={j}>\n                  {cell === \"dead\" && (\n                    <Square\n                      onClick={() => handleOnSquareClick(i, j, cell)}\n                      type={cell}\n                    ></Square>\n                  )}\n                  {cell === \"alive\" && (\n                    <Square\n                      onClick={() => handleOnSquareClick(i, j, cell)}\n                      type={cell}\n                    >\n                      0\n                    </Square>\n                  )}\n                  {cell === \"hole\" && (\n                    <Square\n                      onClick={() => handleOnSquareClick(i, j, cell)}\n                      type={cell}\n                    ></Square>\n                  )}\n                </Fragment>\n              );\n            })}\n          </Flex>\n        );\n      })}\n      <button onClick={handleOnResetClick}>Reset</button>\n    </div>\n  );\n};\n\nexport default React.memo(Home);\n"],"sourceRoot":""}