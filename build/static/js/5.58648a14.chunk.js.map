{"version":3,"sources":["home/ActionCreators.js","home/Actions.js","utils.js","home/styles.js","home/index.js"],"names":["updateBoardStatusAction","data","dispatch","payload","type","types","updateFirstCordAction","updateSecondCordAction","isFirstCordSelectedAction","resetBoardAction","Flex","styled","div","RemainingMarbelsContainer","RemainingMarbelsTitle","label","RemainingMarbels","SubmitScoreContainer","UsernameInput","input","isValid","SubmitButton","button","Board","lazy","Home","useDispatch","useState","marbelsLeft","setMarbelsLeft","username","setUsername","isValidUserName","setIsValidUserName","useSelector","state","homepage","boardStatus","firstCord","isFirstCordSelected","toggleFirstCordSelected","handleOnResetClick","fallback","handleOnSquareClick","x","y","alert","Math","abs","isValidMove","isHorizontalMove","temp","map","row","i","updateBoardStatus","count","forEach","ele","calculateRemainingMarbles","j","isValidMoveLeft","onChange","e","value","target","test","String","placeholder","onClick","console","log","disabled","React","memo"],"mappings":"iLAQO,SAASA,EAAwBC,GACtC,OAAO,SAACC,GCJuB,IAACC,EDK9BD,GCL8BC,EDKHF,ECLgB,CAC7CG,KAAMC,IACNF,cDOK,SAASG,EAAsBL,GACpC,OAAO,SAACC,GCFqB,IAACC,EDG5BD,GCH4BC,EDGHF,ECHgB,CAC3CG,KAAMC,IACNF,cDKK,SAASI,EAAuBN,GACrC,OAAO,SAACC,GCAsB,IAACC,EDC7BD,GCD6BC,EDCHF,ECDgB,CAC5CG,KAAMC,IACNF,cDGK,SAASK,EAA0BP,GACxC,OAAO,SAACC,GCEyB,IAACC,EDDhCD,GCCgCC,EDDHF,ECCgB,CAC/CG,KAAMC,IACNF,cDCK,SAASM,IACd,OAAO,SAACP,GACNA,ECG6B,CAC/BE,KAAMC,OClCD,I,8rCCFA,IAAMK,EAAOC,IAAOC,IAAV,KAIJC,EAA4BF,YAAOD,EAAPC,CAAH,KAIzBG,EAAwBH,IAAOI,MAAV,KAMrBC,EAAmBL,IAAOI,MAAV,KAOhBE,EAAuBN,YAAOD,EAAPC,CAAH,KAYpBO,EAAgBP,IAAOQ,MAAV,KAMd,qBAAGC,QACD,oBAAsB,uBAOvBC,EAAeV,IAAOW,OAAV,KCzBnBC,EAAQC,gBAAK,kBAAM,gCAEnBC,EAAO,WACX,IAAMvB,EAAWwB,cADA,EAGqBC,mBAAS,IAH9B,mBAGVC,EAHU,KAGGC,EAHH,OAIeF,mBAAS,IAJxB,mBAIVG,EAJU,KAIAC,EAJA,OAK6BJ,oBAAS,GALtC,mBAKVK,EALU,KAKOC,EALP,OAOuCC,aACtD,SAACC,GAAD,OAAWA,EAAMC,YADXC,EAPS,EAOTA,YAAaC,EAPJ,EAOIA,UAAWC,EAPf,EAOeA,oBAO1BC,EAA0B,kBAC9BtC,EAASM,GAA2B+B,KAkKhCE,EAAqB,WACzBvC,EAASO,KACToB,EAAe,KAkCjB,OACE,eAAC,WAAD,CAAUa,SAAS,GAAnB,UACE,4CACA,eAAC7B,EAAD,WACE,cAACC,EAAD,gCACA,cAACE,EAAD,UAAmBY,OAErB,cAACL,EAAD,CACEc,YAAaA,EACbM,oBA5EsB,SAACC,EAAGC,EAAGzC,GACpB,SAATA,IAEQmC,EAODA,IACI,SAATnC,GACFoC,IACAtC,EAASK,EAAuB,CAAEqC,EAAGA,EAAGC,EAAGA,KA9F7B,SAACD,EAAGC,GAEtB,OAAIP,EAAUM,IAAMA,GAAKN,EAAUO,IAAMA,GACvCC,MAAM,kCACC,GACER,EAAUM,IAAMA,EAGO,IAA9BG,KAAKC,IAAIV,EAAUO,EAAIA,IAGjB,UAFNR,EAAYC,EAAUM,GACpBN,EAAUO,EAAIA,EAAIP,EAAUO,EAAI,EAAIP,EAAUO,EAAI,KAKpDC,MAAM,oBACC,GAEAR,EAAUO,IAAMA,EAGO,IAA9BE,KAAKC,IAAIV,EAAUM,EAAIA,IAGjB,UAFNP,EAAYC,EAAUM,EAAIA,EAAIN,EAAUM,EAAI,EAAIN,EAAUM,EAAI,GAC5DN,EAAUO,KAKZC,MAAM,oBACC,QAXJ,EA6ECG,CAAYL,EAAGC,MAvDC,SAACD,EAAGC,EAAGK,GAC/B,IAAMC,EAAI,YAAOd,GACba,EAEFC,EAAKC,KAAI,SAACC,EAAKC,GACb,OAAIA,IAAMhB,EAAUM,GAClBS,EAAIf,EAAUO,GAAK,OACnBQ,EAAIf,EAAUO,EAAIA,EAAIP,EAAUO,EAAI,EAAIP,EAAUO,EAAI,GAAK,OAC3DQ,EAAIR,GAAK,QACFQ,GACKA,KAIhBF,EAAKC,KAAI,SAACC,EAAKC,GACb,OAAIA,IAAMhB,EAAUM,GAIhBU,KAAOhB,EAAUM,EAAIA,EAAIN,EAAUM,EAAI,EAAIN,EAAUM,EAAI,IAH3DS,EAAIf,EAAUO,GAAK,OACZQ,GAMLC,IAAMV,GACRS,EAAIR,GAAK,QACFQ,GAEFA,KAIXnD,EAASF,EAAwB,YAAImD,KAyB/BI,CAAkBX,EAAGC,EAAGP,EAAUM,IAAMA,GACxCf,EAnH0B,WAChC,IAAI2B,EAAQ,EAQZ,OAPAnB,EAAYoB,SAAQ,SAACJ,GAAD,OAClBA,EAAII,SAAQ,SAACC,GACC,UAARA,GACFF,UAICA,EA0GcG,IA9IC,WACtB,IAAIH,EAAQ,EAoBZ,OAnBAnB,EAAYoB,SAAQ,SAACJ,EAAKC,GAAN,OAClBD,EAAII,SAAQ,SAACC,EAAKE,GACJ,SAARF,IAE+C,WAA7CrB,EAAYiB,IAAMjB,EAAYiB,GAAGM,EAAI,KACS,WAA7CvB,EAAYiB,IAAMjB,EAAYiB,GAAGM,EAAI,KACvCvB,EAAYiB,IACe,UAA1BjB,EAAYiB,GAAGM,EAAI,IAC2B,WAA7CvB,EAAYiB,IAAMjB,EAAYiB,GAAGM,EAAI,KACW,WAAjDvB,EAAYiB,EAAI,IAAMjB,EAAYiB,EAAI,GAAGM,KACS,WAAjDvB,EAAYiB,EAAI,IAAMjB,EAAYiB,EAAI,GAAGM,KACO,WAAjDvB,EAAYiB,EAAI,IAAMjB,EAAYiB,EAAI,GAAGM,KACS,WAAjDvB,EAAYiB,EAAI,IAAMjB,EAAYiB,EAAI,GAAGM,MAE5CJ,UAKDA,EAAQ,EA0HJK,KACHf,MAAM,sBACNL,OAIJK,MAAM,8BAnBK,SAAT1C,GACFoC,IACAtC,EAASI,EAAsB,CAAEsC,EAAGA,EAAGC,EAAGA,MAE1CC,MAAM,0CAqENL,mBAAoBA,IAEtB,eAACxB,EAAD,WACE,cAACC,EAAD,CACEd,KAAK,OACL0D,SA1CuB,SAACC,GAAO,IAEzBC,EACRD,EADFE,OAAUD,MFjND,qBACDE,KAAKC,OEkNGH,KAIhB/B,GAAmB,GACnBF,EAAYiC,IAJZ/B,GAAmB,IAsCfb,QAASY,EACToC,YAAY,aAEd,cAAC/C,EAAD,CAAcgD,QA9BQ,WACrBrC,EAIHsC,QAAQC,IACN,aAAezC,EAAW,0BAA4BF,GAJxDkB,MAAM,kCA4BwC0B,UAAWxC,EAAvD,2BAQOyC,cAAMC,KAAKjD","file":"static/js/5.58648a14.chunk.js","sourcesContent":["import {\n  updateBoardStatus,\n  updateFirstCord,\n  updateSecondCord,\n  isFirstCordSelected,\n  resetBoard,\n} from \"./Actions\";\n\nexport function updateBoardStatusAction(data) {\n  return (dispatch) => {\n    dispatch(updateBoardStatus(data));\n  };\n}\n\nexport function updateFirstCordAction(data) {\n  return (dispatch) => {\n    dispatch(updateFirstCord(data));\n  };\n}\n\nexport function updateSecondCordAction(data) {\n  return (dispatch) => {\n    dispatch(updateSecondCord(data));\n  };\n}\n\nexport function isFirstCordSelectedAction(data) {\n  return (dispatch) => {\n    dispatch(isFirstCordSelected(data));\n  };\n}\n\nexport function resetBoardAction() {\n  return (dispatch) => {\n    dispatch(resetBoard());\n  };\n}\n","import * as types from \"./ActionTypes\";\n\n/**\n * @description action for updating board status\n */\nexport const updateBoardStatus = (payload) => ({\n  type: types.UPDATE_BOARD_STATUS,\n  payload,\n});\n\n/**\n * @description action for updating co-ordinates for first tile\n */\nexport const updateFirstCord = (payload) => ({\n  type: types.UPDATE_FIRST_CORD,\n  payload,\n});\n\n/**\n * @description action for updating co-ordinates for second tile\n */\nexport const updateSecondCord = (payload) => ({\n  type: types.UPDATE_SECOND_CORD,\n  payload,\n});\n\n/**\n * @description action for toggling firstCordSelected flag\n */\nexport const isFirstCordSelected = (payload) => ({\n  type: types.IS_FIRST_CORD_SELECTED,\n  payload,\n});\n\n/**\n * @description action for resetting the board\n */\nexport const resetBoard = () => ({\n  type: types.RESET_BOARD,\n});\n","/**\n * @param {String} input\n * validate user name entered\n */\nexport const validateName = (input) => {\n  const name = /^[^-\\s][a-zA-Z ]+$/;\n  return name.test(String(input));\n};\n","import styled from \"styled-components\";\n\nexport const Flex = styled.div`\n  display: flex;\n`;\n\nexport const RemainingMarbelsContainer = styled(Flex)`\n  flex-direction: column;\n`;\n\nexport const RemainingMarbelsTitle = styled.label`\n  font-size: 18px;\n  font-weight: 700;\n  line-height: 24px;\n`;\n\nexport const RemainingMarbels = styled.label`\n  font-size: 30px;\n  font-weight: 700;\n  line-height: 36px;\n  margin-bottom: 16px;\n`;\n\nexport const SubmitScoreContainer = styled(Flex)`\n  width: 100%;\n  justify-content: space-around;\n  align-items: center;\n  margin-bottom: 16px;\n\n  @media (min-width: 768px) {\n    width: 50%;\n    margin: 0 auto;\n  }\n`;\n\nexport const UsernameInput = styled.input`\n  width: 65%;\n  height: 40px;\n  font-size: 16px;\n  line-height: 22px;\n  text-align: center;\n  border: ${({ isValid }) =>\n    isValid ? \"2px solid #7fb5dd\" : \"2px solid #db0d16\"};\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const SubmitButton = styled.button`\n  width: 30%;\n  height: 46px;\n  background-color: #0ba90b;\n  color: white;\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 24px;\n  border: 0;\n  border-radius: 8px;\n`;\n","import React, { useState, Suspense, lazy } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  updateBoardStatusAction,\n  updateFirstCordAction,\n  updateSecondCordAction,\n  isFirstCordSelectedAction,\n  resetBoardAction,\n} from \"./ActionCreators\";\n\n// utility imports\nimport { validateName } from \"../utils\";\n\n// Style imports\nimport {\n  RemainingMarbelsContainer,\n  RemainingMarbelsTitle,\n  RemainingMarbels,\n  SubmitScoreContainer,\n  UsernameInput,\n  SubmitButton,\n} from \"./styles\";\n\n// lazy imports\nconst Board = lazy(() => import(\"../board\"));\n\nconst Home = () => {\n  const dispatch = useDispatch();\n\n  const [marbelsLeft, setMarbelsLeft] = useState(32);\n  const [username, setUsername] = useState(\"\");\n  const [isValidUserName, setIsValidUserName] = useState(true);\n\n  const { boardStatus, firstCord, isFirstCordSelected } = useSelector(\n    (state) => state.homepage\n  );\n\n  /**\n   * method to toggle the first co-ordinate selected flag\n   */\n  const toggleFirstCordSelected = () =>\n    dispatch(isFirstCordSelectedAction(!isFirstCordSelected));\n\n  /**\n   * Checks whether any valid moves are remaining on the board\n   */\n  const isValidMoveLeft = () => {\n    let count = 0;\n    boardStatus.forEach((row, i) =>\n      row.forEach((ele, j) => {\n        if (ele === \"hole\") {\n          if (\n            ((boardStatus[i] && boardStatus[i][j + 1]) === \"alive\" &&\n              (boardStatus[i] && boardStatus[i][j + 2]) === \"alive\") ||\n            (boardStatus[i] &&\n              boardStatus[i][j - 1] === \"alive\" &&\n              (boardStatus[i] && boardStatus[i][j - 2]) === \"alive\") ||\n            ((boardStatus[i + 1] && boardStatus[i + 1][j]) === \"alive\" &&\n              (boardStatus[i + 2] && boardStatus[i + 2][j]) === \"alive\") ||\n            ((boardStatus[i - 1] && boardStatus[i - 1][j]) === \"alive\" &&\n              (boardStatus[i - 2] && boardStatus[i - 2][j]) === \"alive\")\n          ) {\n            count++;\n          }\n        }\n      })\n    );\n    return count > 0 ? true : false;\n  };\n\n  /**\n   * method to calculate total remaining marbels\n   */\n  const calculateRemainingMarbles = () => {\n    let count = 0;\n    boardStatus.forEach((row) =>\n      row.forEach((ele) => {\n        if (ele === \"alive\") {\n          count++;\n        }\n      })\n    );\n    return count;\n  };\n\n  /**\n   * @param {Number} x: x-coordinate of the selected square on the board\n   * @param {Number} y: y-coordinate of the selected square on the board\n   * based on the co-ordinates of source and destination square\n   * checks if the proposed move is valid or not\n   */\n  const isValidMove = (x, y) => {\n    // check if the move is a diagonal move\n    if (firstCord.x !== x && firstCord.y !== y) {\n      alert(\"No Diagonal moves are allowed\");\n      return false;\n    } else if (firstCord.x === x) {\n      // if its a horizontal move, check whether the absolute distance is 2 and middle one is not blank square\n      if (\n        Math.abs(firstCord.y - y) === 2 &&\n        boardStatus[firstCord.x][\n          firstCord.y > y ? firstCord.y - 1 : firstCord.y + 1\n        ] === \"alive\"\n      ) {\n        return true;\n      } else {\n        alert(\"Invalid Move!!!\");\n        return false;\n      }\n    } else if (firstCord.y === y) {\n      // if its a vertical move, check whether the absolute distance is 2 and middle one is not blank square\n      if (\n        Math.abs(firstCord.x - x) === 2 &&\n        boardStatus[firstCord.x > x ? firstCord.x - 1 : firstCord.x + 1][\n          firstCord.y\n        ] === \"alive\"\n      ) {\n        return true;\n      } else {\n        alert(\"Invalid Move!!!\");\n        return false;\n      }\n    }\n  };\n\n  /**\n   * @param {Number} x: x-coordinate of the selected square on the board\n   * @param {Number} y: y-coordinate of the selected square on the board\n   * @param {Boolean} isHorizontalMove: horizontal move flag to decide the move type\n   * update board matrices based on the move type\n   */\n  const updateBoardStatus = (x, y, isHorizontalMove) => {\n    const temp = [...boardStatus];\n    if (isHorizontalMove) {\n      // replace source and adjecent square with blank tile and destination with bubble tile horizontally\n      temp.map((row, i) => {\n        if (i === firstCord.x) {\n          row[firstCord.y] = \"hole\";\n          row[firstCord.y > y ? firstCord.y - 1 : firstCord.y + 1] = \"hole\";\n          row[y] = \"alive\";\n          return row;\n        } else return row;\n      });\n    } else {\n      // replace source and adjecent square with blank tile and destination with bubble tile vertically\n      temp.map((row, i) => {\n        if (i === firstCord.x) {\n          row[firstCord.y] = \"hole\";\n          return row;\n        }\n        if (i === (firstCord.x > x ? firstCord.x - 1 : firstCord.x + 1)) {\n          row[firstCord.y] = \"hole\";\n          return row;\n        }\n        if (i === x) {\n          row[y] = \"alive\";\n          return row;\n        }\n        return row;\n      });\n    }\n    // update the board status\n    dispatch(updateBoardStatusAction([...temp]));\n  };\n\n  /**\n   * @param {Number} x: x-coordinate of the selected square on the board\n   * @param {Number} y: y-coordinate of the selected square on the board\n   * @param {String} type: Selected square type\n   * store the source and destination square co-ordinates\n   * validate the proposed move and check if any valid moves are left\n   */\n  const handleOnSquareClick = (x, y, type) => {\n    if (type === \"dead\") {\n      return;\n    } else if (!isFirstCordSelected) {\n      if (type !== \"hole\") {\n        toggleFirstCordSelected();\n        dispatch(updateFirstCordAction({ x: x, y: y }));\n      } else {\n        alert(\"Please select approprite first tile!\");\n      }\n    } else if (isFirstCordSelected) {\n      if (type === \"hole\") {\n        toggleFirstCordSelected();\n        dispatch(updateSecondCordAction({ x: x, y: y }));\n        if (isValidMove(x, y)) {\n          updateBoardStatus(x, y, firstCord.x === x);\n          setMarbelsLeft(calculateRemainingMarbles());\n          if (!isValidMoveLeft()) {\n            alert(\"no more moves left\");\n            handleOnResetClick();\n          }\n        }\n      } else {\n        alert(\"Please select blank tile!\");\n      }\n    }\n  };\n\n  /**\n   * method to dispatch reset action\n   */\n  const handleOnResetClick = () => {\n    dispatch(resetBoardAction());\n    setMarbelsLeft(32);\n  };\n\n  /**\n   * @param {Event} e\n   * methos to validate and store username\n   */\n  const handleOnUserNameChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    if (!validateName(value)) {\n      setIsValidUserName(false);\n      return;\n    } else {\n      setIsValidUserName(true);\n      setUsername(value);\n    }\n  };\n\n  /**\n   * methos to send username and score on submit\n   */\n  const handleOnSubmitClick = () => {\n    if (!isValidUserName) {\n      alert(\"Please enter valid username!!\");\n      return;\n    } else {\n      console.log(\n        \"Username: \" + username + \" | Marbels Remaining : \" + marbelsLeft\n      );\n    }\n  };\n\n  return (\n    <Suspense fallback=\"\">\n      <h1>Brain Vita</h1>\n      <RemainingMarbelsContainer>\n        <RemainingMarbelsTitle>Marbels Remaining</RemainingMarbelsTitle>\n        <RemainingMarbels>{marbelsLeft}</RemainingMarbels>\n      </RemainingMarbelsContainer>\n      <Board\n        boardStatus={boardStatus}\n        handleOnSquareClick={handleOnSquareClick}\n        handleOnResetClick={handleOnResetClick}\n      />\n      <SubmitScoreContainer>\n        <UsernameInput\n          type=\"text\"\n          onChange={handleOnUserNameChange}\n          isValid={isValidUserName}\n          placeholder=\"Username\"\n        />\n        <SubmitButton onClick={handleOnSubmitClick} disabled={!isValidUserName}>\n          Submit\n        </SubmitButton>\n      </SubmitScoreContainer>\n    </Suspense>\n  );\n};\n\nexport default React.memo(Home);\n"],"sourceRoot":""}